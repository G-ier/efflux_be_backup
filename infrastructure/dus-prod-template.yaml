AWSTemplateFormatVersion: 2010-09-09

####################
# Parameters
####################

Parameters:
  OperatorEmail:
    Description: The email address to notify when there are any scaling activities
    Type: String
    Default: ilyas@roi.ad

####################
# Resources
####################

Resources:
  # Creating Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DUS-Prod
      GroupDescription: Enable SSH access and HTTP
      VpcId: !ImportValue Efflux-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DUS-Prod
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # Configuring launch template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: DUS-Prod
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: yes
              Encrypted: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: yes
            DeleteOnTermination: yes
            Groups:
              - !Ref InstanceSecurityGroup
        ImageId: ami-0fc5d935ebf8bc3bc # Ubuntu Server 22.04 LTS (HVM) SSD
        KeyName: efflux-dus
        InstanceType: t3a.large
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update and install initial packages
            sudo apt-get update && \
            sudo apt-get upgrade -y && \
            sudo apt-get install -y python3 ca-certificates curl gnupg curl htop wget zip ruby && \
            sudo mkdir -p /var/www/efflux-backend && \
            sudo chown -R ubuntu:ubuntu /var/www/efflux-backend

            # Install NodeJS
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

            NODE_MAJOR=20
            echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list

            sudo apt-get update
            sudo apt-get install nodejs -y

            # Install PM2
            sudo npm install pm2@latest -g

            # Install CodeDeploy Agent
            cd /tmp && \
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install && \
            sudo chmod +x ./install && \
            sudo ./install auto && \
            sudo service codedeploy-agent start

            # Install New Relic Agent
            curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=NRAK-HK5ODU5XY1IV1B9CQ9WRL8VPIAX NEW_RELIC_ACCOUNT_ID=4261318 /usr/local/bin/newrelic install -y --tag project:dus-prod

            # Add alias for pm2
            echo "alias pm2='sudo pm2'" >> ~/.bashrc

            # use newrelic staging file
            sudo cp /var/www/efflux-backend/newrelic/dus_prod.js /var/www/efflux-backend/newrelic.js

            # Add alias for quickly accessing the project directory
            echo "alias efflux='cd /var/www/efflux-backend && ll'" >> ~/.bashrc
            source ~/.bashrc

        TagSpecifications:
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: DUS-Prod Volume
              - Key: project
                Value: efflux
              - Key: component
                Value: dus
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: DUS-Prod Instance
              - Key: project
                Value: efflux
              - Key: component
                Value: dus

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: email
      TopicName: DUS-Prod-ScalingNotification
      Tags:
        - Key: Name
          Value: DUS-Prod-ScalingNotification
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # Create an Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: DUS-Prod-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
            ]
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !ImportValue Efflux-PublicSubnet1
        - !ImportValue Efflux-PublicSubnet2
        - !ImportValue Efflux-PublicSubnet3
      Tags:
        - Key: Name
          Value: DUS-Prod Instance
          PropagateAtLaunch: true
        - Key: project
          Value: efflux
          PropagateAtLaunch: true
        - Key: component
          Value: dus
          PropagateAtLaunch: true

  # Creating an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: DusProdALB
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Subnets:
        - !ImportValue Efflux-PublicSubnet1
        - !ImportValue Efflux-PublicSubnet2
        - !ImportValue Efflux-PublicSubnet3
      Tags:
        - Key: Name
          Value: DusProdALB
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # Configuring Application Load Balancer Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DUS-Prod
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: "30"
      HealthCheckTimeoutSeconds: "5"
      Port: "80"
      Protocol: HTTP
      VpcId: !ImportValue Efflux-VPC
      Tags:
        - Key: Name
          Value: DUS-Prod
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # Configuring Application Load Balancer Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  # Configuring Application Load Balancer Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref ALBListener
      Priority: "1"

  # Scaling Policy
  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: "1"

  # Alarm for testing
  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: DUS-Prod-CPU-Alarm
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "60"
      AlarmDescription: Alarm set fo 60% of CPU utilization
      Period: "60"
      AlarmActions:
        - !Ref ScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  # Create CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: DUS-Prod
      ComputePlatform: Server
      Tags:
        - Key: Name
          Value: DUS-Prod
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # # Create CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: DUS-Prod
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: DUS-Prod
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref ALBTargetGroup
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: DUS-Prod Instance
      TriggerConfigurations:
        - TriggerEvents:
            - DeploymentFailure
            - DeploymentStop
            - DeploymentSuccess
          TriggerName: DUS-Prod-DeploymentTrigger
          TriggerTargetArn: !Ref NotificationTopic
      Tags:
        - Key: Name
          Value: DUS-Prod-DeploymentGroup
        - Key: project
          Value: efflux
        - Key: component
          Value: dus

  # Create CodeDeploy Service Role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeDeployServiceRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:*
                  - ec2:Describe*
                  - elasticloadbalancing:*
                  - s3:*
                  - sns:*
                  - cloudwatch:*
                  - cloudformation:*
                  - codedeploy:*
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter*
                Resource: "*"

  # # Create CodeDeploy Instance Profile
  CodeDeployInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref CodeDeployServiceRole
      InstanceProfileName: DUS-Prod-InstanceProfile

  # # Create CodeDeploy Role
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeDeployRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - s3:Get*
                  - s3:List*
                  - sns:*
                  - cloudwatch:*
                  - cloudformation:*
                  - codedeploy:*
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter*
                Resource: "*"

  # # Create CodeDeploy Role Policy
  CodeDeployRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployRolePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:*
              - ec2:*
              - elasticloadbalancing:*
              - s3:Get*
              - s3:List*
              - sns:*
              - cloudwatch:*
              - cloudformation:*
              - codedeploy:*
              - secretsmanager:GetSecretValue
              - ssm:GetParameter*
            Resource: "*"
      Roles:
        - !Ref CodeDeployRole

  # Create CodeDeploy Role Instance Profile
  CodeDeployRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref CodeDeployRole
      InstanceProfileName: DUS-Prod

####################
# Outputs
####################

Outputs:
  ALBTargetGroup:
    Description: Application Load Balancer Target Group ID
    Value: !Ref ALBTargetGroup
  CloudWatchAlarm:
    Description: CloudWatch Alarm ID
    Value: !Ref CloudWatchAlarm
