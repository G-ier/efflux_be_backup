-----------------------------------------------------------------------------------
# query by date and aggregate by date.
WITH restriction AS (
  SELECT DISTINCT campaign_id
    FROM media_net_stats
  WHERE 
    date > '2023-05-01' AND date <= '2023-05-31'
), agg_mn AS (
      SELECT 
          date as mn_date,
          SUM(impressions) AS total_impressions,
          SUM(total_clicks) AS total_clicks,
          SUM(estimated_revenue) AS total_revenue
      FROM 
          media_net_stats
      WHERE 
          date > '2023-05-01' AND date <= '2023-05-31'
      GROUP BY date
), agg_fb AS (
      SELECT fb.date as fb_date,
      MAX(fb.created_at) as fb_last_updated,
      MAX(fb.date) as date,
      MAX(fb.updated_at) as last_updated,
      (CASE WHEN SUM(fb.lead) IS null THEN 0 ELSE CAST(SUM(fb.lead) AS INTEGER) END) as fb_lead,
      CAST(ROUND(SUM(fb.total_spent)::decimal, 2) AS FLOAT) as spend,
      CAST(SUM(fb.link_clicks) AS INTEGER) as link_clicks,
      CAST(SUM(fb.conversions) AS INTEGER) as fb_conversions,
      CAST(SUM(fb.impressions) AS INTEGER) as impressions
      FROM facebook_partitioned fb
      WHERE  fb.date >  '2023-05-01'
      AND  fb.date <= '2023-05-31'
      AND fb.campaign_id IN (SELECT campaign_id FROM restriction)
      GROUP BY fb.date
)
SELECT 
    (CASE
        WHEN agg_fb.fb_date IS NOT null THEN agg_fb.fb_date
        WHEN agg_mn.mn_date IS NOT null THEN agg_mn.mn_date
        ELSE null
    END) as date,
    SUM(agg_mn.total_impressions) as total_impressions,
    SUM(agg_mn.total_clicks) as total_clicks,
    SUM(agg_mn.total_revenue) as total_revenue,
    CAST(ROUND(SUM(agg_fb.spend)::decimal, 2) AS FLOAT) as spend,
    CAST(SUM(agg_fb.fb_conversions) AS INTEGER) as fb_conversions,
    CAST(SUM(agg_fb.link_clicks) AS INTEGER) as link_clicks,
    CAST(SUM(agg_fb.impressions) AS INTEGER) as impressions
FROM agg_mn
  FULL OUTER JOIN agg_fb ON agg_fb.fb_date = agg_mn.mn_date
GROUP BY agg_fb.fb_date, agg_mn.mn_date
ORDER BY agg_mn.mn_date ASC;
-----------------------------------------------------------------------------------
# query by date and aggregate by campaign_id.
WITH restriction AS (
  SELECT DISTINCT campaign_id
  FROM media_net_stats
  WHERE 
    date > '2023-05-01' AND date <= '2023-05-31'
), agg_mn AS (
    SELECT 
        campaign_id,
        SUM(impressions) AS total_impressions,
        SUM(total_clicks) AS total_clicks,
        SUM(estimated_revenue) AS total_revenue
    FROM 
        media_net_stats
    WHERE 
        date > '2023-05-01' AND date <= '2023-05-31'
    GROUP BY 
        campaign_id
), agg_fb AS (
      SELECT fb.campaign_id as campaign_id,
      MAX(fb.created_at) as fb_last_updated,
      MAX(fb.date) as date,
      MAX(fb.updated_at) as last_updated,
      (CASE WHEN SUM(fb.lead) IS null THEN 0 ELSE CAST(SUM(fb.lead) AS INTEGER) END) as fb_lead,
      CAST(ROUND(SUM(fb.total_spent)::decimal, 2) AS FLOAT) as spend,
      CAST(SUM(fb.link_clicks) AS INTEGER) as link_clicks,
      CAST(SUM(fb.conversions) AS INTEGER) as fb_conversions,
      CAST(SUM(fb.impressions) AS INTEGER) as impressions
      FROM facebook_partitioned fb
      WHERE  fb.date >  '2023-05-01'
      AND  fb.date <= '2023-05-31'
      AND fb.campaign_id IN (SELECT campaign_id FROM restriction)
      GROUP BY campaign_id
)
SELECT 
    SUM(agg_mn.total_impressions) as total_impressions,
    SUM(agg_mn.total_clicks) as total_clicks,
    SUM(agg_mn.total_revenue) as total_revenue,
    CAST(ROUND(SUM(agg_fb.spend)::decimal, 2) AS FLOAT) as spend,
    CAST(SUM(agg_fb.fb_conversions) AS INTEGER) as fb_conversions,
    CAST(SUM(agg_fb.link_clicks) AS INTEGER) as link_clicks,
    CAST(SUM(agg_fb.impressions) AS INTEGER) as impressions
FROM agg_mn
  FULL OUTER JOIN agg_fb USING(campaign_id);
-----------------------------------------------------------------------------------
# query by date and aggregate by hour.
WITH restriction AS (
  SELECT DISTINCT campaign_id
  FROM media_net_stats
  WHERE 
    date > '2023-05-01' AND date <= '2023-05-31'
), agg_mn AS (
    SELECT 
        hour,
        SUM(impressions) AS total_impressions,
        SUM(total_clicks) AS total_clicks,
        SUM(estimated_revenue) AS total_revenue
    FROM 
        media_net_stats
    WHERE 
        date > '2023-05-01' AND date <= '2023-05-31'
    GROUP BY hour
), agg_fb AS (
    SELECT
      fb.hour as fb_hour,
      MAX(fb.created_at) as fb_last_updated,
      MAX(fb.date) as date,
      MAX(fb.updated_at) as last_updated,
      (CASE WHEN SUM(fb.lead) IS null THEN 0 ELSE CAST(SUM(fb.lead) AS INTEGER) END) as fb_lead,
      CAST(ROUND(SUM(fb.total_spent)::decimal, 2) AS FLOAT) as spend,
      CAST(SUM(fb.link_clicks) AS INTEGER) as link_clicks,
      CAST(SUM(fb.conversions) AS INTEGER) as fb_conversions,
      CAST(SUM(fb.impressions) AS INTEGER) as impressions
      FROM facebook_partitioned fb
      WHERE  fb.date >  '2023-05-01'
      AND  fb.date <= '2023-05-31'
      AND fb.campaign_id IN (SELECT campaign_id FROM restriction)
      GROUP BY fb.hour
)
SELECT 
    (CASE
          WHEN agg_fb.fb_hour IS NOT null THEN agg_fb.fb_hour
          WHEN agg_mn.hour IS NOT null THEN agg_mn.hour
    END) as hour,
    SUM(agg_mn.total_impressions) as total_impressions,
    SUM(agg_mn.total_clicks) as total_clicks,
    SUM(agg_mn.total_revenue) as total_revenue,
    CAST(ROUND(SUM(agg_fb.spend)::decimal, 2) AS FLOAT) as spend,
    CAST(SUM(agg_fb.fb_conversions) AS INTEGER) as fb_conversions,
    CAST(SUM(agg_fb.link_clicks) AS INTEGER) as link_clicks,
    CAST(SUM(agg_fb.impressions) AS INTEGER) as impressions
FROM agg_mn
    FULL OUTER JOIN agg_fb ON agg_mn.hour = agg_fb.fb_hour
GROUP BY agg_fb.fb_hour, agg_mn.hour;
-----------------------------------------------------------------------------------
# query by campaign_id and date and aggregate it by date.
WITH agg_mn AS (
  SELECT 
      date as mn_date,
      SUM(impressions) AS total_impressions,
      SUM(total_clicks) AS total_clicks,
      SUM(estimated_revenue) AS total_revenue
  FROM 
      media_net_stats
  WHERE 
      date > '2023-05-01' AND date <= '2023-05-31'
  AND 
      campaign_id = '23853641876870184'
  GROUP BY date ORDER BY date
), agg_fb AS (
    SELECT
      fb.date as fb_date,
      MAX(fb.created_at) as fb_last_updated,
      MAX(fb.date) as date,
      MAX(fb.updated_at) as last_updated,
      (CASE WHEN SUM(fb.lead) IS null THEN 0 ELSE CAST(SUM(fb.lead) AS INTEGER) END) as fb_lead,
      CAST(ROUND(SUM(fb.total_spent)::decimal, 2) AS FLOAT) as spend,
      CAST(SUM(fb.link_clicks) AS INTEGER) as link_clicks,
      CAST(SUM(fb.conversions) AS INTEGER) as fb_conversions,
      CAST(SUM(fb.impressions) AS INTEGER) as impressions
      FROM facebook_partitioned fb
      WHERE  fb.date >  '2023-05-01'
      AND  fb.date <= '2023-05-31'
      AND fb.campaign_id = '23853641876870184'
      GROUP BY fb.date
)
SELECT 
    (CASE
        WHEN agg_fb.fb_date IS NOT null THEN agg_fb.fb_date
        WHEN agg_mn.mn_date IS NOT null THEN agg_mn.mn_date
        ELSE null
    END) as date,
    SUM(agg_mn.total_impressions) as total_impressions,
    SUM(agg_mn.total_clicks) as total_clicks,
    SUM(agg_mn.total_revenue) as total_revenue,
    CAST(ROUND(SUM(agg_fb.spend)::decimal, 2) AS FLOAT) as spend,
    CAST(SUM(agg_fb.fb_conversions) AS INTEGER) as fb_conversions,
    CAST(SUM(agg_fb.link_clicks) AS INTEGER) as link_clicks,
    CAST(SUM(agg_fb.impressions) AS INTEGER) as impressions
FROM agg_mn
    FULL OUTER JOIN agg_fb ON agg_fb.fb_date = agg_mn.mn_date
GROUP BY agg_fb.fb_date, agg_mn.mn_date
ORDER BY agg_mn.mn_date ASC;
-----------------------------------------------------------------------------------
# query by campaign_id and date and aggregates it by adset_id
WITH agg_mn AS (
      SELECT 
          adset_id,
          SUM(impressions) AS total_impressions,
          SUM(total_clicks) AS total_clicks,
          SUM(estimated_revenue) AS total_revenue
      FROM 
          media_net_stats
      WHERE 
          date > '2023-05-01' AND date <= '2023-12-31'
      AND 
          campaign_id = '23853641876870184'
      GROUP BY 
          adset_id
), agg_fb AS (
    SELECT
      fb.adset_id as adset_id,
      MAX(fb.created_at) as fb_last_updated,
      MAX(fb.date) as date,
      MAX(fb.updated_at) as last_updated,
      (CASE WHEN SUM(fb.lead) IS null THEN 0 ELSE CAST(SUM(fb.lead) AS INTEGER) END) as fb_lead,
      CAST(ROUND(SUM(fb.total_spent)::decimal, 2) AS FLOAT) as spend,
      CAST(SUM(fb.link_clicks) AS INTEGER) as link_clicks,
      CAST(SUM(fb.conversions) AS INTEGER) as fb_conversions,
      CAST(SUM(fb.impressions) AS INTEGER) as impressions
      FROM facebook_partitioned fb
      WHERE  fb.date >  '2023-05-01'
      AND  fb.date <= '2023-05-31'
      AND fb.campaign_id = '23853641876870184'
      GROUP BY fb.adset_id
), agg_adsets AS (
        SELECT MAX(adsets.provider_id) as adset_id,
               MAX(adsets.name) as adset_name,
               MAX(adsets.campaign_id) as campaign_id
        FROM adsets
        WHERE adsets.campaign_id = '23853641876870184'
        GROUP BY adsets.provider_id
)
SELECT *
FROM agg_mn
    FULL OUTER JOIN agg_fb USING(adset_id)
    FULL OUTER JOIN agg_adsets USING (adset_id);
